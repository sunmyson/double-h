import collections
import time
import threading
import pyaudio
import wave

class RollingAudioBuffer:
    def __init__(self, duration=30, sample_rate=16000, channels=1, chunk_size=1024):
        """
        Initializes a rolling audio buffer to hold the last `duration` seconds of audio.
        
        Args:
            duration (int): Duration of the rolling window in seconds.
            sample_rate (int): Audio sample rate in Hz.
            channels (int): Number of audio channels (1 for mono, 2 for stereo).
            chunk_size (int): Size of audio chunks to process at a time.
        """
        self.duration = duration
        self.sample_rate = sample_rate
        self.channels = channels
        self.chunk_size = chunk_size

        # Total number of frames to store in the rolling window
        self.frames_per_second = self.sample_rate // self.chunk_size
        self.max_frames = self.frames_per_second * self.duration

        # Initialize a deque to hold audio frames
        self.buffer = collections.deque(maxlen=self.max_frames)
        self.lock = threading.Lock()

        # PyAudio setup
        self.audio = pyaudio.PyAudio()
        self.stream = self.audio.open(format=pyaudio.paInt16,
                                      channels=self.channels,
                                      rate=self.sample_rate,
                                      input=True,
                                      frames_per_buffer=self.chunk_size)
        self.running = False

    def start_recording(self):
        """Start recording and storing audio in the rolling buffer."""
        self.running = True
        threading.Thread(target=self._record_audio, daemon=True).start()

    def stop_recording(self):
        """Stop recording audio."""
        self.running = False
        self.stream.stop_stream()
        self.stream.close()
        self.audio.terminate()

    def _record_audio(self):
        """Internal method to continuously record audio into the buffer."""
        while self.running:
            audio_data = self.stream.read(self.chunk_size, exception_on_overflow=False)
            with self.lock:
                self.buffer.append(audio_data)

    def get_audio_data(self):
        """
        Retrieves the current audio data from the rolling buffer.

        Returns:
            bytes: Concatenated audio data from the rolling buffer.
        """
        with self.lock:
            return b''.join(list(self.buffer))

    def save_to_file(self, filename="output.wav"):
        """
        Save the current audio data in the buffer to a WAV file.

        Args:
            filename (str): Name of the file to save the audio data to.
        """
        with self.lock:
            audio_data = b''.join(self.buffer)

        with wave.open(filename, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.audio.get_sample_size(pyaudio.paInt16))
            wf.setframerate(self.sample_rate)
            wf.writeframes(audio_data)

if __name__ == "__main__":
    # Example usage
    rolling_buffer = RollingAudioBuffer(duration=30)
    print("Starting recording...")
    rolling_buffer.start_recording()

    try:
        time.sleep(10)  # Record for 10 seconds (replace with your logic)
    except KeyboardInterrupt:
        pass

    print("Stopping recording and saving to file...")
    rolling_buffer.stop_recording()
    rolling_buffer.save_to_file("last_30_seconds.wav")
    print("Audio saved!")
